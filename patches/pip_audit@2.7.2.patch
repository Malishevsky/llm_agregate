diff -ruN pip_audit_orig/___PATCHED___.txt pip_audit/___PATCHED___.txt
--- pip_audit_orig/___PATCHED___.txt	1970-01-01 03:00:00.000000000 +0300
+++ pip_audit/___PATCHED___.txt	2024-03-02 22:04:37.027948052 +0300
@@ -0,0 +1 @@
+patched
diff -ruN pip_audit_orig/_cli.py pip_audit/_cli.py
--- pip_audit_orig/_cli.py	2024-03-02 22:59:15.552030843 +0300
+++ pip_audit/_cli.py	2024-03-02 22:58:52.516278089 +0300
@@ -19,6 +19,7 @@
     DependencySource,
     DependencySourceError,
     PipSource,
+    PoetrySource,
     PyProjectSource,
     RequirementSource,
 )
@@ -358,6 +359,11 @@
         default="stdout",
     )
     parser.add_argument(
+        "--exclude_packages",
+        type=str,
+        default='',
+    )
+    parser.add_argument(
         "--ignore-vuln",
         type=str,
         metavar="ID",
@@ -394,11 +400,17 @@
 
 
 def _dep_source_from_project_path(
-    project_path: Path, index_url: str, extra_index_urls: list[str], state: AuditState
+    project_path: Path, index_url: str, extra_index_urls: list[str], state: AuditState, exclude_packages: set[str]
 ) -> DependencySource:  # pragma: no cover
+    poetry_lock = project_path / "poetry.lock"
+    if poetry_lock.is_file():
+        logger.debug("using PoetrySource as dependency source")
+        return PoetrySource(path=poetry_lock,exclude_packages=exclude_packages)
+
     # Check for a `pyproject.toml`
     pyproject_path = project_path / "pyproject.toml"
     if pyproject_path.is_file():
+        logger.debug("using PyProjectSource as dependency source")
         return PyProjectSource(
             pyproject_path,
             index_url=index_url,
@@ -479,12 +491,16 @@
             # NOTE: We'll probably want to support --skip-editable here,
             # once PEP 660 is more widely supported: https://www.python.org/dev/peps/pep-0660/
 
+            exclude_packages = set(name.lower() for name in args.exclude_packages.split(':')) if 'exclude_packages' in args else set()
+            print(f'Exclude: {exclude_packages}')
+
             # Determine which kind of project file exists in the project path
             source = _dep_source_from_project_path(
                 args.project_path,
                 args.index_url,
                 args.extra_index_urls,
                 state,
+                exclude_packages,
             )
         else:
             source = PipSource(
diff -ruN pip_audit_orig/_dependency_source/__init__.py pip_audit/_dependency_source/__init__.py
--- pip_audit_orig/_dependency_source/__init__.py	2024-03-02 22:59:15.552030843 +0300
+++ pip_audit/_dependency_source/__init__.py	2024-03-02 22:04:37.027948052 +0300
@@ -10,6 +10,7 @@
     InvalidRequirementSpecifier,
 )
 from .pip import PipSource, PipSourceError
+from .poetry import PoetrySource
 from .pyproject import PyProjectSource
 from .requirement import RequirementSource
 
@@ -21,6 +22,7 @@
     "InvalidRequirementSpecifier",
     "PipSource",
     "PipSourceError",
+    "PoetrySource",
     "PyProjectSource",
     "RequirementSource",
 ]
diff -ruN pip_audit_orig/_dependency_source/poetry.py pip_audit/_dependency_source/poetry.py
--- pip_audit_orig/_dependency_source/poetry.py	1970-01-01 03:00:00.000000000 +0300
+++ pip_audit/_dependency_source/poetry.py	2024-03-02 22:56:00.824179621 +0300
@@ -0,0 +1,57 @@
+"""
+Collect dependencies from `poetry.lock` files.
+"""
+from __future__ import annotations
+
+import logging
+from dataclasses import dataclass
+from pathlib import Path
+from typing import Iterator
+
+import toml
+from packaging.version import InvalidVersion, Version
+
+from pip_audit._dependency_source import DependencyFixError, DependencySource
+from pip_audit._fix import ResolvedFixVersion
+from pip_audit._service import Dependency, ResolvedDependency, SkippedDependency
+
+logger = logging.getLogger(__name__)
+
+@dataclass(frozen=True)
+class PoetrySource(DependencySource):
+    """
+    Dependency sourcing from `poetry.lock`.
+    """
+
+    path: Path
+    exclude_packages: set[str]
+
+    def collect(self) -> Iterator[Dependency]:
+        """
+        Collect all of the dependencies discovered by this `PoetrySource`.
+        """
+        with self.path.open("r") as stream:
+            packages = toml.load(stream)
+        for package in packages["package"]:
+            name = package["name"]
+            if name.lower() in self.exclude_packages:
+                continue
+            try:
+                version = Version(package["version"])
+            except InvalidVersion:
+                skip_reason = (
+                    "Package has invalid version and could not be audited: "
+                    f"{name} ({package['version']})"
+                )
+                yield SkippedDependency(name=name, skip_reason=skip_reason)
+            else:
+                yield ResolvedDependency(name=name, version=version)
+
+    def fix(self, fix_version: ResolvedFixVersion) -> None:
+        """
+        Fixes a dependency version for this `PoetrySource`.
+        Requires poetry to be installed in the same env.
+        Note that poetry ignores the version we want to update to,
+        and goes straight to the latest version allowed in metadata.
+        """
+        raise DependencyFixError("fix is not supported for poetry yet")  # pragma: no cover
